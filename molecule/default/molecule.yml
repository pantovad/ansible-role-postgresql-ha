---
dependency:
  name: galaxy
  options:
    requirements-file: ${MOLECULE_PROJECT_DIRECTORY}/molecule/default/collections.yml
lint: |
  set -e
  yamllint .
  ansible-lint
driver:
  name: vagrant
  provider:
    name: libvirt
platforms:
  - name: pgsql01
    box: ${MOLECULE_DISTRO:-"generic/ubuntu2004"}
    groups: 
      - pgcluster
    config_options:
      ssh.keep_alive: yes
      ssh.remote_user: "'vagrant'"
    memory: 1024
    cpus: 1
    interfaces:
      - network_name: private_network
        type: static
        ip: 192.168.30.2
        auto_config: true
  - name: pgsql02
    box: ${MOLECULE_DISTRO:-"generic/ubuntu2004"}
    config_options:
      ssh.keep_alive: yes
      ssh.remote_user: "'vagrant'"
    groups: 
      - pgcluster
    memory: 1024
    cpus: 1
    interfaces:
      - network_name: private_network
        type: static
        ip: 192.168.30.3
        auto_config: true
scenario:
  test_sequence:
    - dependency
    - lint
    - cleanup
    - destroy
    - syntax
    - create
    - prepare
    - converge
    # - idempotence
    - side_effect
    - verify
    - cleanup
    - destroy
provisioner:
  name: ansible
  log: true
  inventory:
    group_vars:
      pgcluster: 
        postgresql_version: ${POSTGRESQL_VERSION:-"14"}
        postgresql_port: 5432
        repmgr_version: ${REPMGR_VERSION:-"5.4"}
        repmgr_master: pgsql01
        repmgr_target_group: pgcluster
        postgresql_service_user: postgres
        postgresql_listen_addresses: "*"
        postgresql_wal_level: "replica"
        postgresql_max_wal_senders: 10
        postgresql_max_replication_slots: 10
        postgresql_wal_keep_segments: 100
        postgresql_hot_standby: on
        postgresql_ext_install_repmgr: yes
        postgresql_shared_preload_libraries:
          - repmgr
        postgresql_pg_hba_custom:
          - { type: "host", database: "all", user: "all", address: "192.168.30.0/24", method: "md5" }
          - { type: "host", database: "replication", user: "{{ repmgr_user }}", address: "192.168.30.0/24", method: "trust" }  
          - { type: "host", database: "replication", user: "{{ repmgr_user }}", address: "127.0.0.1/32", method: "trust" }  
          - { type: "host", database: "{{ repmgr_database }}", user: "{{ repmgr_user }}", address: "127.0.0.1/32", method: "trust" }  
          - { type: "host", database: "{{ repmgr_database }}", user: "{{ repmgr_user }}", address: "192.168.30.0/24", method: "trust" } 
        # Databases
        postgresql_databases:
          - name: "{{ repmgr_database }}"
            owner: "{{ repmgr_user }}"
            encoding: "UTF-8"
          - name: testdb
            owner: admin
            encoding: "UTF-8"
        # Users
        postgresql_users:
          - name: "{{ repmgr_user }}"
            pass: "{{ repmgr_password }}"
          - name: admin
            pass: secret
            encrypted: yes
        # Roles
        postgresql_user_privileges:
          - name: "{{ repmgr_user }}"
            db: "{{ repmgr_database }}"
            priv: "ALL"
            role_attr_flags: "SUPERUSER,REPLICATION"
          - name: admin
            db: testdb
            role_attr_flags: "SUPERUSER"
    host_vars:
      pgsql01:
        repmgr_node_id: 1
      pgsql02:
        repmgr_node_id: 2
  config_options:
    defaults:
      callbacks_enabled: "profile_tasks,timer"
      interpreter_python: /usr/bin/python3
      pipelining: true
      local_tmp: /var/tmp
